from django.contrib.auth.models import AbstractUser
from django.db import models
from django.core.validators import RegexValidator, MaxValueValidator, MinValueValidator
from django.core.exceptions import ValidationError
from datetime import datetime
from decimal import Decimal
from datetime import date, datetime, timedelta, time
import threading
import calendar

_thread_locals = threading.local()

def set_force_shift_times(value: bool):
    _thread_locals.force_shift_times = value

def get_force_shift_times():
    return getattr(_thread_locals, 'force_shift_times', False)
class Employees(AbstractUser):
    personal_number=models.CharField(max_length=3, 
                                     unique=True,
                                     validators=[RegexValidator(
                                         regex=r'^\d{3}$', message='Osobn√© ƒç√≠slo mus√≠ ma≈• presne 3 ƒç√≠slice (napr. 001, 123).'
                                     )])
    
    ROLE_CHOICES=[
         ('admin', 'Administr√°tor'),
        ('manager', 'Mana≈æ√©r'),
        ('worker', 'Zamestnanec'),
    ]
    role = models.CharField(max_length=20, choices=ROLE_CHOICES, default='worker')

    

    USERNAME_FIELD = 'username'
    REQUIRED_FIELDS = ['email', 'first_name', 'last_name', 'personal_number']

    def __str__(self):
        return f"{self.first_name} {self.last_name} ({self.personal_number})"



class TypeShift(models.Model):
    nameShift = models.CharField(max_length=50)
    start_time = models.TimeField()
    end_time = models.TimeField()
    duration_time = models.DecimalField(
        max_digits=4, decimal_places=2,
        validators=[
            MinValueValidator(Decimal("0.5"), message="Trvanie mus√≠ by≈• aspo≈à 0.5 hodiny"),
            MaxValueValidator(Decimal("24.0"), message="Trvanie nem√¥≈æe by≈• viac ako 24 hod√≠n")
        ]
    )
    allow_variable_time = models.BooleanField(
        default=False,
        help_text="Ak je zapnut√©, zamestnanec m√¥≈æe pr√≠s≈• a od√≠s≈• kedykoƒævek (napr. flexibiln√° smena)."
    )

    def __str__(self):
        return self.nameShift

    def clean(self):
        if not self.allow_variable_time:
            if self.end_time <= self.start_time:
                raise ValidationError("Koniec smeny mus√≠ by≈• nesk√¥r ako zaƒçiatok.")

"""emploee time at work"""
class Attendance(models.Model):
    user= models.ForeignKey(Employees, on_delete=models.CASCADE)
    date = models.DateField()
    type_shift= models.ForeignKey(TypeShift, null=True, blank=True, on_delete=models.SET_NULL)
    planned_shift = models.ForeignKey('WorkTrackApi.PlannedShifts',
    null=True,
    blank=True,
    on_delete=models.SET_NULL,
    help_text="Vybran√° pl√°novan√° smena, z ktorej sa preberaj√∫ ƒçasy",
    related_name="attendances_as_planned"
)

    custom_start= models.TimeField(null=True, blank=True)
    custom_end= models.TimeField(null=True,blank=True)
    note= models.TextField(blank=True)
    exchanged_with = models.ForeignKey('WorkTrackApi.PlannedShifts',                   
                null=True,
                blank=True,
                on_delete=models.SET_NULL,
                help_text="P√¥vodn√° smena kolegu, ktor√∫ zamestnanec prebral",
                related_name="attendances_as_exchanged_with"
            )

    
    calendar_day = models.ForeignKey('WorkTrackApi.CalendarDay', on_delete=models.CASCADE, related_name="attendances",null=True, blank=True)
    # class Meta:
    #     unique_together=('user', 'date')

   

    def clean(self):
        # Overenie neprekrytia ƒçasov√Ωch intervalov pre rovnak√©ho user a date
        overlapping = Attendance.objects.filter(
            user=self.user,
            date=self.date,
        ).exclude(pk=self.pk)  # nezahr≈àujem seba sam√©ho

        for att in overlapping:
            # Intervaly [custom_start, custom_end)
            if self.custom_start and self.custom_end and att.custom_start and att.custom_end:
                # Check overlap
                if (self.custom_start < att.custom_end and self.custom_end > att.custom_start):
                    raise ValidationError("ƒåasov√© intervaly sa prekr√Ωvaj√∫ s in√Ωm z√°znamom.")
      
    def round_to_nearest_half_hour(self,t: time) -> time:
        dt = datetime.combine(datetime.today(), t)
        minute = dt.minute
        # Rozdiel k dolnej a hornej 30-min√∫tovej hranici
        down = minute % 30
        up = 30 - down

        if down < up:
            dt_rounded = dt - timedelta(minutes=down)
        else:
            dt_rounded = dt + timedelta(minutes=up)
        return dt_rounded.time()
  
        #ZMENA NOƒçNEJ  
    def handle_night_shift(self):
        if self.type_shift and self.type_shift.id == 20:
            self.custom_end = time(0, 0)
            self.save()

            next_day = self.date + timedelta(days=1)

            Attendance.objects.create(
                user=self.user,
                date=next_day,
                type_shift=self.type_shift,
                custom_start=time(0, 0),
                custom_end=time(9, 0),
                note="Pokraƒçovanie noƒçnej smeny",
            )
    

    #  """PREPISUJE NOVE CASY V PLANNED SHIFT"""   
    @classmethod
    def handle_any_shift_time(cls):
        set_force_shift_times(True)
        try:
            change_reason_obj = ChangeReason.objects.filter(category="cdr").first()
            if not change_reason_obj:
                print("‚ö†Ô∏è Ch√Ωba ChangeReason pre 'skor≈°√≠ pr√≠chod' s kateg√≥riou 'absence'")

            print("Sp√∫≈°≈•am handle_any_shift_time...")

            type_shift_id = 22
            changed_shift = TypeShift.objects.get(id=type_shift_id)

            # Spracov√°vame len pl√°novan√© smeny, ktor√© nie s√∫ skryt√©
            for plan in PlannedShifts.objects.filter(hidden=False):
                try:
                    att = cls.objects.filter(
                        user=plan.user,
                        date=plan.date
                    ).filter(
                        models.Q(exchanged_with__isnull=True) | models.Q(exchanged_with__hidden=False)
                    ).order_by('id').first()

                    if not att:
                        continue

                    changed = False

                    # Skor≈°√≠ pr√≠chod
                    if att.custom_start and plan.custom_start and att.custom_start < plan.custom_start:
                        try:
                            cls.objects.create(
                                user=plan.user,
                                date=plan.date,
                                custom_start=att.custom_start,
                                custom_end=plan.custom_start,
                                type_shift=changed_shift,
                                note="Skor≈°√≠ pr√≠chod "
                            )
                            PlannedShifts.objects.create(
                                user=plan.user,
                                date=plan.date,
                                custom_start=att.custom_start,
                                custom_end=plan.custom_start,
                                type_shift=changed_shift,
                                transferred=True,
                                is_changed=True,
                                change_reason=change_reason_obj,
                                note="Automaticky: Skor≈°√≠ pr√≠chod"
                            )
                            att.custom_start = plan.custom_start
                            att.save(update_fields=['custom_start'])
                            changed = True

                        except ValidationError:
                            print(f"‚ö†Ô∏è Prekr√Ωvanie: nevytvoren√Ω rozdiel za skor≈°√≠ pr√≠chod pre {plan.user} {plan.date}")

                    # Neskor≈°√≠ odchod
                    if att.custom_end and plan.custom_end and att.custom_end > plan.custom_end:
                        try:
                            cls.objects.create(
                                user=plan.user,
                                date=plan.date,
                                custom_start=plan.custom_end,
                                custom_end=att.custom_end,
                                type_shift=changed_shift,
                                note="Neskor≈°√≠ odchod"
                            )
                            PlannedShifts.objects.create(
                                user=plan.user,
                                date=plan.date,
                                custom_start=plan.custom_end,
                                custom_end=att.custom_end,
                                type_shift=changed_shift,
                                transferred=True,
                                is_changed=True,
                                change_reason=change_reason_obj,
                                note="Neskor≈°√≠ odchod"
                            )
                            att.custom_end = plan.custom_end
                            att.save(update_fields=['custom_end'])
                            changed = True

                        except ValidationError:
                            print(f"‚ö†Ô∏è Prekr√Ωvanie: nevytvoren√Ω rozdiel za neskor≈°√≠ odchod pre {plan.user} {plan.date}")

                    if changed:
                        if not plan.transferred:
                            plan.transferred = True
                            plan.save(update_fields=['transferred'])

                except cls.DoesNotExist:
                    continue
                except Exception as e:
                    print(f"üõë Chyba pri spracovan√≠ pl√°novan√©ho z√°znamu pre {plan.user} - {e}")

        finally:
            set_force_shift_times(False)

        
    def exchange_shift(self, target_shift):
                
        if not target_shift:
            raise ValidationError("Nebola vybran√° smena na v√Ωmenu.")

        if self.user == target_shift.user:
            raise ValidationError("Nem√¥≈æe≈° si vymeni≈• smenu s√°m so sebou.")

        if self.date != target_shift.date or self.type_shift != target_shift.type_shift:
            raise ValidationError("Smena na v√Ωmenu mus√≠ by≈• rovnak√©ho typu a d≈àa.")

        # üî§ Vygeneruj dynamick√Ω d√¥vod
        self.exchange_reason = f"v√Ωmena smien s {target_shift.user.full_name if hasattr(target_shift.user, 'full_name') else str(target_shift.user)}"
        self.exchanged_with = target_shift

        # üíæ Vytvor nov√Ω pl√°novan√Ω z√°znam pre tohto zamestnanca (ak chce≈°)
        new_shift=PlannedShifts.objects.create(
            user=self.user,
            date=self.date,
            type_shift=self.type_shift,
            custom_start=self.custom_start,
            custom_end=self.custom_end,
            transferred=True,
            is_changed=True,
           
            note=f"V√Ωmena smeny s {target_shift.user}"
        )

        new_shift.save()  # üî¥ Toto je kƒæ√∫ƒçov√© ‚Äì mus√≠ sa ulo≈æi≈• pred pou≈æit√≠m
        # üóë inaktivuj p√¥vodn√∫ smenu kolegu
        target_shift.hidden = True
        target_shift.save(update_fields=["hidden"])

        # 3. Prirad√≠me referenciu na t√∫ p√¥vodn√∫ smenu (alebo t√∫ nov√∫)
        self.exchanged_with = new_shift

        # ‚úÖ Ulo≈æ aktualizovan√Ω Attendance
        self.save()


    def save(self, *args, **kwargs):
        if not get_force_shift_times():
        # Ak nem√°me force flag, doplni custom ƒçasy z pl√°novanej smeny alebo typu smeny
        # Dopƒ∫≈àanie z planned_shift alebo type_shift, ak nie s√∫ ruƒçne zadan√©
            if self.planned_shift:
                if not self.date:
                    self.date = self.planned_shift.date
                if not self.custom_start:
                    self.custom_start = self.planned_shift.custom_start  # ‚úÖ spr√°vne pole
                if not self.custom_end:
                    self.custom_end = self.planned_shift.custom_end      # ‚úÖ spr√°vne pole
                if not self.type_shift:
                    self.type_shift = self.planned_shift.type_shift      # ‚úÖ dopln√≠≈° aj typ smeny

            elif self.type_shift:
                if not self.custom_start:
                    self.custom_start = self.type_shift.start_time
                if not self.custom_end:
                    self.custom_end = self.type_shift.end_time

        # Zaokr√∫hlenie na najbli≈æ≈°iu polhodinu
        if self.custom_start:
            self.custom_start = self.round_to_nearest_half_hour(self.custom_start)
        if self.custom_end:
            self.custom_end = self.round_to_nearest_half_hour(self.custom_end)

        # Valid√°cia ƒçasov (aj cez polnoc)
        if self.custom_start and self.custom_end:
            start_dt = datetime.combine(date.today(), self.custom_start)
            end_dt = datetime.combine(date.today(), self.custom_end)
            if end_dt <= start_dt:
                end_dt += timedelta(days=1)
                if end_dt <= start_dt:
                    raise ValidationError("Koniec smeny mus√≠ by≈• po zaƒçiatku (alebo spr√°vna noƒçn√° smena).")
    # Dopln√≠m automatick√© nastavenie calendar_day podƒæa date/planned_shift.date, ak nie je nastaven√©
        if not self.calendar_day:
            day_date = self.date or (self.planned_shift.date if self.planned_shift else None)
            if day_date:
                calendar_day = CalendarDay.objects.filter(date=day_date).first()
                if calendar_day:
                    self.calendar_day = calendar_day

        super().save(*args, **kwargs)


"""Change reason"""
class ChangeReason(models.Model):
    CATEGORY_CHOICES = [
        ('absence', 'Nepr√≠tomnos≈• / zmena rozpisu'),
        ('cdr', 'In√° ƒçinnos≈• zamestnanca '),
    ]

    name = models.CharField(max_length=255, default="D√¥vod nezadan√Ω")
    description = models.TextField(blank=True)
    category = models.CharField(max_length=10, choices=CATEGORY_CHOICES)

    def __str__(self):
        return self.name
    

"""planned shifts"""


class PlannedShifts(models.Model):
    user = models.ForeignKey(Employees, on_delete=models.CASCADE)
    date = models.DateField(null=True, blank=True)
    type_shift = models.ForeignKey(TypeShift, null=True, blank=True, on_delete=models.SET_NULL)
    custom_start = models.TimeField(null=True, blank=True)
    custom_end = models.TimeField(null=True, blank=True)
    note = models.TextField(blank=True)
    transferred = models.BooleanField(default=False)
    is_changed = models.BooleanField(default=False)
    hidden = models.BooleanField(default=False)
    change_reason = models.ForeignKey('WorkTrackApi.ChangeReason',on_delete=models.CASCADE, related_name="change_reason", blank=True, null=True)
    calendar_day = models.ForeignKey('WorkTrackApi.CalendarDay', on_delete=models.CASCADE, related_name="calendar_day",null=True, blank=True)
   
    class Meta:
      unique_together = ('user', 'date', 'custom_start', 'custom_end')

    def __str__(self):
        return f"{self.user} {self.type_shift}"

    def save(self, *args, **kwargs):
        if self.pk:
            orig = PlannedShifts.objects.get(pk=self.pk)
            # Kontrola zmien ƒçasov
            if orig.custom_start and self.custom_start and self.custom_start != orig.custom_start:
                raise ValidationError("Zmena ƒçasov pl√°novanej smeny nie je povolen√° (zaƒçiatok).")

            if orig.custom_end and self.custom_end and self.custom_end != orig.custom_end:
                raise ValidationError("Zmena ƒçasov pl√°novanej smeny nie je povolen√° (koniec).")
            # ‚ö†Ô∏è Skontroluj, ƒçi sa zmenil d√°tum a nastav calendar_day nanovo
            if self.date != orig.date:
                try:
                    self.calendar_day = CalendarDay.objects.get(date=self.date)
                except CalendarDay.DoesNotExist:
                    raise ValidationError(f"Pre d√°tum {self.date} neexistuje CalendarDay.")

        else:
            # Vytv√°ranie novej smeny
            if not self.calendar_day and self.date:
                try:
                    self.calendar_day = CalendarDay.objects.get(date=self.date)
                except CalendarDay.DoesNotExist:
                    raise ValidationError(f"CalendarDay pre d√°tum {self.date} neexistuje.")

         # ‚è∞ Doplnenie ƒçasov zo smeny (iba pri vytv√°ran√≠)
        if self.type_shift:
            if not self.custom_start:
                self.custom_start = self.type_shift.start_time
            if not self.custom_end:
                self.custom_end = self.type_shift.end_time

                  

        # Potom m√¥≈æe≈° overi≈•, ƒçi je dan√Ω de≈à sviatok alebo v√≠kend
        if self.calendar_day:
            print(f"Calendar day: {self.calendar_day.date}, sviatok: {self.calendar_day.is_holiday}, v√≠kend: {self.calendar_day.is_weekend}")
            if self.calendar_day.is_holiday:
            # sprav nieƒço, ak je sviatok
                print("Toto je sviatok")
            elif self.calendar_day.is_weekend:
            # sprav nieƒço, ak je v√≠kend
                print("Toto je v√≠kend")
        # üïí Valid√°cia
        if self.custom_start and self.custom_end:
            start = datetime.combine(date.today(), self.custom_start)
            end = datetime.combine(date.today(), self.custom_end)
            if end <= start:
                end += timedelta(days=1)
                if end <= start:
                    raise ValidationError("Koniec smeny mus√≠ by≈• po zaƒçiatku (alebo spr√°vna noƒçn√° smena).")

    
        # üíæ Ulo≈æ z√°znam
        super().save(*args, **kwargs)
        print(f"Uklad√°m PlannedShift pre d√°tum {self.date}")

class CalendarDay(models.Model):
    date = models.DateField(unique=True)
    day = models.CharField(max_length=20)
    is_weekend = models.BooleanField(default=False)
    is_holiday = models.BooleanField(default=False)
    holiday_name = models.CharField(max_length=100, blank=True, null=True)  

    def __str__(self):
        return f"{self.date} ({self.day})"

    @staticmethod
    def get_easter_sunday(year):
        "V√Ωpoƒçet d√°tumu Veƒækonoƒçnej nedele podƒæa algoritmu (Computus)"
        a = year % 19
        b = year // 100
        c = year % 100
        d = b // 4
        e = b % 4
        f = (b + 8) // 25
        g = (b - f + 1) // 3
        h = (19 * a + b - d - g + 15) % 30
        i = c // 4
        k = c % 4
        l = (32 + 2 * e + 2 * i - h - k) % 7
        m = (a + 11 * h + 22 * l) // 451
        month = (h + l - 7 * m + 114) // 31
        day = ((h + l - 7 * m + 114) % 31) + 1
        return date(year, month, day)

    @staticmethod
    def get_slovak_holidays(year):
        "Vr√°ti zoznam sviatkov vo forme [(d√°tum, n√°zov)]"
        fixed = [
            (1, 1, "De≈à vzniku SR"),
            (1, 6, "Zjavenie P√°na"),
            (5, 1, "Sviatok pr√°ce"),
            (5, 8, "De≈à v√≠≈•azstva nad fa≈°izmom"),
            (7, 5, "Sviatok sv. Cyrila a Metoda"),
            (8, 29, "V√Ωroƒçie SNP"),
            (9, 1, "De≈à √östavy SR"),
            (9, 15, "Sedembolestn√° Panna M√°ria"),
            (11, 1, "Sviatok v≈°etk√Ωch sv√§t√Ωch"),
            (11, 17, "De≈à boja za slobodu a demokraciu"),
            (12, 24, "≈†tedr√Ω de≈à"),
            (12, 25, "1. sviatok vianoƒçn√Ω"),
            (12, 26, "2. sviatok vianoƒçn√Ω"),
        ]
        movable = []
        easter = CalendarDay.get_easter_sunday(year)
        movable.append((easter - timedelta(days=2), "Veƒæk√Ω piatok"))
        movable.append((easter + timedelta(days=1), "Veƒækonoƒçn√Ω pondelok"))

        return [(date(year, m, d), name) for m, d, name in fixed] + movable

    @classmethod
    def generate_calendar(cls, start_year, end_year):
        """
        Vygeneruje dni v kalend√°ri pre dan√© roky, vr√°tane sviatkov.
        """
        for year in range(start_year, end_year + 1):
            holidays = dict(cls.get_slovak_holidays(year))

            d = date(year, 1, 1)
            while d.year == year:
                weekday_name = calendar.day_name[d.weekday()]
                is_weekend = weekday_name in ["Saturday", "Sunday"]
                is_holiday = d in holidays
                holiday_name = holidays.get(d, "")

                obj, created = cls.objects.get_or_create(
                    date=d,
                    defaults={
                         "day": weekday_name,
                        "is_weekend": is_weekend,
                        "is_holiday": is_holiday,
                        "holiday_name": holiday_name
                    }
                )

                if not created:
                    # aktualizuj ak sa zmenilo
                    obj.day = weekday_name
                    obj.is_weekend = is_weekend
                    obj.is_holiday = is_holiday
                    obj.holiday_name = holiday_name
                    obj.save()

                d += timedelta(days=1)